[req]
default_keyfile             = aos_pkey.pem
default_bits                = 2048
distinguished_name          = req_distinguished_name
attributes                  = req_attributes
x509_extensions             = v3_ca # The extentions to add to the self signed cert

[ req_distinguished_name ]
countryName                       = Country Name (2 letter code)
countryName_default               = US
countryName_min                   = 2
countryName_max                   = 2

stateOrProvinceName               = State or Province Name (full name)
stateOrProvinceName_default       = Texas

localityName                      = Locality Name (eg, city)
localityName_default              = Austin

0.organizationName                = Organization Name (eg, company)
0.organizationName_default        = achacha.org

organizationalUnitName            = Organizational Unit Name (eg, section)
organizationalUnitName_default    = ASynchObjectServer

commonName                        = Common Name (eg, YOUR name)
commonName_default                = www.achacha.org
commonName_max                    = 64

emailAddress                      = Email Address
emailAddress_default              = alex@achacha.org
emailAddress_max                  = 40

[ req_attributes ]
challengePassword                 = A challenge password
challengePassword_min             = 4
challengePassword_max             = 20
unstructuredName                  = An optional company name

[ usr_cert ]

# These extensions are added when 'ca' signs a request.
# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.
basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.
# This is OK for an SSL server.
# nsCertType                    = server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment                       = "OpenSSL Generated Certificate (ASynchObjectServer)"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl              = http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

[ v3_ca]

# Extensions for a typical CA


# PKIX recommendation.

subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer:always

# This is what PKIX recommends but some broken software chokes on critical
# extensions.
#basicConstraints = critical,CA:true
# So we do this instead.
basicConstraints = CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
# keyUsage = cRLSign, keyCertSign

# Some might want this also
# nsCertType = sslCA, emailCA

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName=email:copy
# Copy issuer details
# issuerAltName=issuer:copy

# RAW DER hex encoding of an extension: beware experts only!
# 1.2.3.5=RAW:02:03
# You can even override a supported extension:
# basicConstraints= critical, RAW:30:03:01:01:FF

[ crl_ext ]
# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always,issuer:always
