#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.1432.
// 
namespace docs {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class controllerDataTable;
        public : ref class inputDataTable;
        public : ref class moduleDataTable;
        public : ref class outputDataTable;
        public : ref class controllerRow;
        public : ref class inputRow;
        public : ref class moduleRow;
        public : ref class outputRow;
        public : ref class controllerRowChangeEvent;
        public : ref class inputRowChangeEvent;
        public : ref class moduleRowChangeEvent;
        public : ref class outputRowChangeEvent;
        
        private: docs::NewDataSet::controllerDataTable^  tablecontroller;
        
        private: docs::NewDataSet::inputDataTable^  tableinput;
        
        private: docs::NewDataSet::moduleDataTable^  tablemodule;
        
        private: docs::NewDataSet::outputDataTable^  tableoutput;
        
        private: ::System::Data::DataRelation^  relationcontroller_input;
        
        private: ::System::Data::DataRelation^  relationcontroller_module;
        
        private: ::System::Data::DataRelation^  relationcontroller_output;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void controllerRowChangeEventHandler(::System::Object^  sender, docs::NewDataSet::controllerRowChangeEvent^  e);
        
        public : delegate System::Void inputRowChangeEventHandler(::System::Object^  sender, docs::NewDataSet::inputRowChangeEvent^  e);
        
        public : delegate System::Void moduleRowChangeEventHandler(::System::Object^  sender, docs::NewDataSet::moduleRowChangeEvent^  e);
        
        public : delegate System::Void outputRowChangeEventHandler(::System::Object^  sender, docs::NewDataSet::outputRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property docs::NewDataSet::controllerDataTable^  controller {
            docs::NewDataSet::controllerDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property docs::NewDataSet::inputDataTable^  input {
            docs::NewDataSet::inputDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property docs::NewDataSet::moduleDataTable^  module {
            docs::NewDataSet::moduleDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property docs::NewDataSet::outputDataTable^  output {
            docs::NewDataSet::outputDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializecontroller();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeinput();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializemodule();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeoutput();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class controllerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnenabled;
            
            private: ::System::Data::DataColumn^  columnajax;
            
            private: ::System::Data::DataColumn^  columnalias;
            
            private: ::System::Data::DataColumn^  columngzip;
            
            private: ::System::Data::DataColumn^  columnsession;
            
            private: ::System::Data::DataColumn^  columnnocache;
            
            private: ::System::Data::DataColumn^  columncontroller_Id;
            
            public: event docs::NewDataSet::controllerRowChangeEventHandler^  controllerRowChanging;
            
            public: event docs::NewDataSet::controllerRowChangeEventHandler^  controllerRowChanged;
            
            public: event docs::NewDataSet::controllerRowChangeEventHandler^  controllerRowDeleting;
            
            public: event docs::NewDataSet::controllerRowChangeEventHandler^  controllerRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            controllerDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            controllerDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            controllerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  enabledColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ajaxColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  aliasColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  gzipColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  sessionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nocacheColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  controller_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::controllerRow^  default [::System::Int32 ] {
                docs::NewDataSet::controllerRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddcontrollerRow(docs::NewDataSet::controllerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::controllerRow^  AddcontrollerRow(
                        System::String^  enabled, 
                        System::String^  ajax, 
                        System::String^  alias, 
                        System::String^  gzip, 
                        System::String^  session, 
                        System::String^  nocache);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::controllerRow^  NewcontrollerRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovecontrollerRow(docs::NewDataSet::controllerRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class inputDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  column_class;
            
            private: ::System::Data::DataColumn^  columncontroller_Id;
            
            public: event docs::NewDataSet::inputRowChangeEventHandler^  inputRowChanging;
            
            public: event docs::NewDataSet::inputRowChangeEventHandler^  inputRowChanged;
            
            public: event docs::NewDataSet::inputRowChangeEventHandler^  inputRowDeleting;
            
            public: event docs::NewDataSet::inputRowChangeEventHandler^  inputRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            inputDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            inputDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            inputDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  _classColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  controller_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::inputRow^  default [::System::Int32 ] {
                docs::NewDataSet::inputRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddinputRow(docs::NewDataSet::inputRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::inputRow^  AddinputRow(System::String^  _class, docs::NewDataSet::controllerRow^  parentcontrollerRowBycontroller_input);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::inputRow^  NewinputRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveinputRow(docs::NewDataSet::inputRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class moduleDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  column_class;
            
            private: ::System::Data::DataColumn^  columncontroller_Id;
            
            public: event docs::NewDataSet::moduleRowChangeEventHandler^  moduleRowChanging;
            
            public: event docs::NewDataSet::moduleRowChangeEventHandler^  moduleRowChanged;
            
            public: event docs::NewDataSet::moduleRowChangeEventHandler^  moduleRowDeleting;
            
            public: event docs::NewDataSet::moduleRowChangeEventHandler^  moduleRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            moduleDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            moduleDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            moduleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  _classColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  controller_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::moduleRow^  default [::System::Int32 ] {
                docs::NewDataSet::moduleRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddmoduleRow(docs::NewDataSet::moduleRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::moduleRow^  AddmoduleRow(System::String^  _class, docs::NewDataSet::controllerRow^  parentcontrollerRowBycontroller_module);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::moduleRow^  NewmoduleRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovemoduleRow(docs::NewDataSet::moduleRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class outputDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  column_class;
            
            private: ::System::Data::DataColumn^  columncontroller_Id;
            
            public: event docs::NewDataSet::outputRowChangeEventHandler^  outputRowChanging;
            
            public: event docs::NewDataSet::outputRowChangeEventHandler^  outputRowChanged;
            
            public: event docs::NewDataSet::outputRowChangeEventHandler^  outputRowDeleting;
            
            public: event docs::NewDataSet::outputRowChangeEventHandler^  outputRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            outputDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            outputDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            outputDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  _classColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  controller_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::outputRow^  default [::System::Int32 ] {
                docs::NewDataSet::outputRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddoutputRow(docs::NewDataSet::outputRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::outputRow^  AddoutputRow(System::String^  _class, docs::NewDataSet::controllerRow^  parentcontrollerRowBycontroller_output);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            docs::NewDataSet::outputRow^  NewoutputRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveoutputRow(docs::NewDataSet::outputRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class controllerRow : public ::System::Data::DataRow {
            
            private: docs::NewDataSet::controllerDataTable^  tablecontroller;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            controllerRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  enabled {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ajax {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  alias {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  gzip {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  session {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  nocache {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 controller_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsenabledNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetenabledNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsajaxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetajaxNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsaliasNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetaliasNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsgzipNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetgzipNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IssessionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetsessionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnocacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnocacheNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< docs::NewDataSet::inputRow^  >^  GetinputRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< docs::NewDataSet::moduleRow^  >^  GetmoduleRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< docs::NewDataSet::outputRow^  >^  GetoutputRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class inputRow : public ::System::Data::DataRow {
            
            private: docs::NewDataSet::inputDataTable^  tableinput;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            inputRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  _class {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 controller_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::controllerRow^  controllerRow {
                docs::NewDataSet::controllerRow^  get();
                System::Void set(docs::NewDataSet::controllerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscontroller_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcontroller_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class moduleRow : public ::System::Data::DataRow {
            
            private: docs::NewDataSet::moduleDataTable^  tablemodule;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            moduleRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  _class {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 controller_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::controllerRow^  controllerRow {
                docs::NewDataSet::controllerRow^  get();
                System::Void set(docs::NewDataSet::controllerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscontroller_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcontroller_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class outputRow : public ::System::Data::DataRow {
            
            private: docs::NewDataSet::outputDataTable^  tableoutput;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            outputRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  _class {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 controller_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::controllerRow^  controllerRow {
                docs::NewDataSet::controllerRow^  get();
                System::Void set(docs::NewDataSet::controllerRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscontroller_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcontroller_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class controllerRowChangeEvent : public ::System::EventArgs {
            
            private: docs::NewDataSet::controllerRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            controllerRowChangeEvent(docs::NewDataSet::controllerRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::controllerRow^  Row {
                docs::NewDataSet::controllerRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class inputRowChangeEvent : public ::System::EventArgs {
            
            private: docs::NewDataSet::inputRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            inputRowChangeEvent(docs::NewDataSet::inputRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::inputRow^  Row {
                docs::NewDataSet::inputRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class moduleRowChangeEvent : public ::System::EventArgs {
            
            private: docs::NewDataSet::moduleRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            moduleRowChangeEvent(docs::NewDataSet::moduleRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::moduleRow^  Row {
                docs::NewDataSet::moduleRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class outputRowChangeEvent : public ::System::EventArgs {
            
            private: docs::NewDataSet::outputRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            outputRowChangeEvent(docs::NewDataSet::outputRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property docs::NewDataSet::outputRow^  Row {
                docs::NewDataSet::outputRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace docs {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &docs::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &docs::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"controller"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::controllerDataTable(ds->Tables[L"controller"])));
            }
            if (ds->Tables[L"input"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::inputDataTable(ds->Tables[L"input"])));
            }
            if (ds->Tables[L"module"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::moduleDataTable(ds->Tables[L"module"])));
            }
            if (ds->Tables[L"output"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::outputDataTable(ds->Tables[L"output"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &docs::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline docs::NewDataSet::controllerDataTable^  NewDataSet::controller::get() {
        return this->tablecontroller;
    }
    
    inline docs::NewDataSet::inputDataTable^  NewDataSet::input::get() {
        return this->tableinput;
    }
    
    inline docs::NewDataSet::moduleDataTable^  NewDataSet::module::get() {
        return this->tablemodule;
    }
    
    inline docs::NewDataSet::outputDataTable^  NewDataSet::output::get() {
        return this->tableoutput;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        docs::NewDataSet^  cln = (cli::safe_cast<docs::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"controller"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::controllerDataTable(ds->Tables[L"controller"])));
            }
            if (ds->Tables[L"input"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::inputDataTable(ds->Tables[L"input"])));
            }
            if (ds->Tables[L"module"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::moduleDataTable(ds->Tables[L"module"])));
            }
            if (ds->Tables[L"output"] != nullptr) {
                __super::Tables->Add((gcnew docs::NewDataSet::outputDataTable(ds->Tables[L"output"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tablecontroller = (cli::safe_cast<docs::NewDataSet::controllerDataTable^  >(__super::Tables[L"controller"]));
        if (initTable == true) {
            if (this->tablecontroller != nullptr) {
                this->tablecontroller->InitVars();
            }
        }
        this->tableinput = (cli::safe_cast<docs::NewDataSet::inputDataTable^  >(__super::Tables[L"input"]));
        if (initTable == true) {
            if (this->tableinput != nullptr) {
                this->tableinput->InitVars();
            }
        }
        this->tablemodule = (cli::safe_cast<docs::NewDataSet::moduleDataTable^  >(__super::Tables[L"module"]));
        if (initTable == true) {
            if (this->tablemodule != nullptr) {
                this->tablemodule->InitVars();
            }
        }
        this->tableoutput = (cli::safe_cast<docs::NewDataSet::outputDataTable^  >(__super::Tables[L"output"]));
        if (initTable == true) {
            if (this->tableoutput != nullptr) {
                this->tableoutput->InitVars();
            }
        }
        this->relationcontroller_input = this->Relations[L"controller_input"];
        this->relationcontroller_module = this->Relations[L"controller_module"];
        this->relationcontroller_output = this->Relations[L"controller_output"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablecontroller = (gcnew docs::NewDataSet::controllerDataTable());
        __super::Tables->Add(this->tablecontroller);
        this->tableinput = (gcnew docs::NewDataSet::inputDataTable());
        __super::Tables->Add(this->tableinput);
        this->tablemodule = (gcnew docs::NewDataSet::moduleDataTable());
        __super::Tables->Add(this->tablemodule);
        this->tableoutput = (gcnew docs::NewDataSet::outputDataTable());
        __super::Tables->Add(this->tableoutput);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_input", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinput->controller_IdColumn}));
        this->tableinput->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_module", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemodule->controller_IdColumn}));
        this->tablemodule->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_output", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableoutput->controller_IdColumn}));
        this->tableoutput->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationcontroller_input = (gcnew ::System::Data::DataRelation(L"controller_input", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinput->controller_IdColumn}, false));
        this->relationcontroller_input->Nested = true;
        this->Relations->Add(this->relationcontroller_input);
        this->relationcontroller_module = (gcnew ::System::Data::DataRelation(L"controller_module", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemodule->controller_IdColumn}, false));
        this->relationcontroller_module->Nested = true;
        this->Relations->Add(this->relationcontroller_module);
        this->relationcontroller_output = (gcnew ::System::Data::DataRelation(L"controller_output", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableoutput->controller_IdColumn}, false));
        this->relationcontroller_output->Nested = true;
        this->Relations->Add(this->relationcontroller_output);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializecontroller() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeinput() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializemodule() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeoutput() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        docs::NewDataSet^  ds = (gcnew docs::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::controllerDataTable::controllerDataTable() {
        this->TableName = L"controller";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::controllerDataTable::controllerDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::controllerDataTable::controllerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::enabledColumn::get() {
        return this->columnenabled;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::ajaxColumn::get() {
        return this->columnajax;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::aliasColumn::get() {
        return this->columnalias;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::gzipColumn::get() {
        return this->columngzip;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::sessionColumn::get() {
        return this->columnsession;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::nocacheColumn::get() {
        return this->columnnocache;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::controller_IdColumn::get() {
        return this->columncontroller_Id;
    }
    
    inline ::System::Int32 NewDataSet::controllerDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::controllerDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<docs::NewDataSet::controllerRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::AddcontrollerRow(docs::NewDataSet::controllerRow^  row) {
        this->Rows->Add(row);
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::controllerDataTable::AddcontrollerRow(
                System::String^  enabled, 
                System::String^  ajax, 
                System::String^  alias, 
                System::String^  gzip, 
                System::String^  session, 
                System::String^  nocache) {
        docs::NewDataSet::controllerRow^  rowcontrollerRow = (cli::safe_cast<docs::NewDataSet::controllerRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {enabled, ajax, alias, 
            gzip, session, nocache, nullptr};
        rowcontrollerRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcontrollerRow);
        return rowcontrollerRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::controllerDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::controllerDataTable::Clone() {
        docs::NewDataSet::controllerDataTable^  cln = (cli::safe_cast<docs::NewDataSet::controllerDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::controllerDataTable::CreateInstance() {
        return (gcnew docs::NewDataSet::controllerDataTable());
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::InitVars() {
        this->columnenabled = __super::Columns[L"enabled"];
        this->columnajax = __super::Columns[L"ajax"];
        this->columnalias = __super::Columns[L"alias"];
        this->columngzip = __super::Columns[L"gzip"];
        this->columnsession = __super::Columns[L"session"];
        this->columnnocache = __super::Columns[L"nocache"];
        this->columncontroller_Id = __super::Columns[L"controller_Id"];
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::InitClass() {
        this->columnenabled = (gcnew ::System::Data::DataColumn(L"enabled", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnenabled);
        this->columnajax = (gcnew ::System::Data::DataColumn(L"ajax", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnajax);
        this->columnalias = (gcnew ::System::Data::DataColumn(L"alias", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnalias);
        this->columngzip = (gcnew ::System::Data::DataColumn(L"gzip", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columngzip);
        this->columnsession = (gcnew ::System::Data::DataColumn(L"session", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsession);
        this->columnnocache = (gcnew ::System::Data::DataColumn(L"nocache", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnnocache);
        this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontroller_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncontroller_Id}, 
                true)));
        this->columnenabled->Namespace = L"";
        this->columnenabled->DefaultValue = (cli::safe_cast<System::String^  >(L"1"));
        this->columnajax->Namespace = L"";
        this->columnajax->DefaultValue = (cli::safe_cast<System::String^  >(L"0"));
        this->columnalias->Namespace = L"";
        this->columnalias->DefaultValue = (cli::safe_cast<System::String^  >(L""));
        this->columngzip->Namespace = L"";
        this->columngzip->DefaultValue = (cli::safe_cast<System::String^  >(L"0"));
        this->columnsession->Namespace = L"";
        this->columnsession->DefaultValue = (cli::safe_cast<System::String^  >(L"0"));
        this->columnnocache->Namespace = L"";
        this->columnnocache->DefaultValue = (cli::safe_cast<System::String^  >(L"1"));
        this->columncontroller_Id->AutoIncrement = true;
        this->columncontroller_Id->AllowDBNull = false;
        this->columncontroller_Id->Unique = true;
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::controllerDataTable::NewcontrollerRow() {
        return (cli::safe_cast<docs::NewDataSet::controllerRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::controllerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew docs::NewDataSet::controllerRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::controllerDataTable::GetRowType() {
        return docs::NewDataSet::controllerRow::typeid;
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->controllerRowChanged(this, (gcnew docs::NewDataSet::controllerRowChangeEvent((cli::safe_cast<docs::NewDataSet::controllerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->controllerRowChanging(this, (gcnew docs::NewDataSet::controllerRowChangeEvent((cli::safe_cast<docs::NewDataSet::controllerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->controllerRowDeleted(this, (gcnew docs::NewDataSet::controllerRowChangeEvent((cli::safe_cast<docs::NewDataSet::controllerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->controllerRowDeleting(this, (gcnew docs::NewDataSet::controllerRowChangeEvent((cli::safe_cast<docs::NewDataSet::controllerRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::controllerDataTable::RemovecontrollerRow(docs::NewDataSet::controllerRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::controllerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        docs::NewDataSet^  ds = (gcnew docs::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"controllerDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::inputDataTable::inputDataTable() {
        this->TableName = L"input";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::inputDataTable::inputDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::inputDataTable::inputDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::inputDataTable::_classColumn::get() {
        return this->column_class;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::inputDataTable::controller_IdColumn::get() {
        return this->columncontroller_Id;
    }
    
    inline ::System::Int32 NewDataSet::inputDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline docs::NewDataSet::inputRow^  NewDataSet::inputDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<docs::NewDataSet::inputRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::inputDataTable::AddinputRow(docs::NewDataSet::inputRow^  row) {
        this->Rows->Add(row);
    }
    
    inline docs::NewDataSet::inputRow^  NewDataSet::inputDataTable::AddinputRow(System::String^  _class, docs::NewDataSet::controllerRow^  parentcontrollerRowBycontroller_input) {
        docs::NewDataSet::inputRow^  rowinputRow = (cli::safe_cast<docs::NewDataSet::inputRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {_class, nullptr};
        if (parentcontrollerRowBycontroller_input != nullptr) {
            columnValuesArray[1] = parentcontrollerRowBycontroller_input[6];
        }
        rowinputRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowinputRow);
        return rowinputRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::inputDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::inputDataTable::Clone() {
        docs::NewDataSet::inputDataTable^  cln = (cli::safe_cast<docs::NewDataSet::inputDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::inputDataTable::CreateInstance() {
        return (gcnew docs::NewDataSet::inputDataTable());
    }
    
    inline ::System::Void NewDataSet::inputDataTable::InitVars() {
        this->column_class = __super::Columns[L"class"];
        this->columncontroller_Id = __super::Columns[L"controller_Id"];
    }
    
    inline ::System::Void NewDataSet::inputDataTable::InitClass() {
        this->column_class = (gcnew ::System::Data::DataColumn(L"class", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_class);
        this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontroller_Id);
        this->column_class->AllowDBNull = false;
        this->column_class->Namespace = L"";
    }
    
    inline docs::NewDataSet::inputRow^  NewDataSet::inputDataTable::NewinputRow() {
        return (cli::safe_cast<docs::NewDataSet::inputRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::inputDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew docs::NewDataSet::inputRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::inputDataTable::GetRowType() {
        return docs::NewDataSet::inputRow::typeid;
    }
    
    inline ::System::Void NewDataSet::inputDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->inputRowChanged(this, (gcnew docs::NewDataSet::inputRowChangeEvent((cli::safe_cast<docs::NewDataSet::inputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::inputDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->inputRowChanging(this, (gcnew docs::NewDataSet::inputRowChangeEvent((cli::safe_cast<docs::NewDataSet::inputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::inputDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->inputRowDeleted(this, (gcnew docs::NewDataSet::inputRowChangeEvent((cli::safe_cast<docs::NewDataSet::inputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::inputDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->inputRowDeleting(this, (gcnew docs::NewDataSet::inputRowChangeEvent((cli::safe_cast<docs::NewDataSet::inputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::inputDataTable::RemoveinputRow(docs::NewDataSet::inputRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::inputDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        docs::NewDataSet^  ds = (gcnew docs::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"inputDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::moduleDataTable::moduleDataTable() {
        this->TableName = L"module";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::moduleDataTable::moduleDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::moduleDataTable::moduleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::moduleDataTable::_classColumn::get() {
        return this->column_class;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::moduleDataTable::controller_IdColumn::get() {
        return this->columncontroller_Id;
    }
    
    inline ::System::Int32 NewDataSet::moduleDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline docs::NewDataSet::moduleRow^  NewDataSet::moduleDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<docs::NewDataSet::moduleRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::AddmoduleRow(docs::NewDataSet::moduleRow^  row) {
        this->Rows->Add(row);
    }
    
    inline docs::NewDataSet::moduleRow^  NewDataSet::moduleDataTable::AddmoduleRow(System::String^  _class, docs::NewDataSet::controllerRow^  parentcontrollerRowBycontroller_module) {
        docs::NewDataSet::moduleRow^  rowmoduleRow = (cli::safe_cast<docs::NewDataSet::moduleRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {_class, nullptr};
        if (parentcontrollerRowBycontroller_module != nullptr) {
            columnValuesArray[1] = parentcontrollerRowBycontroller_module[6];
        }
        rowmoduleRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowmoduleRow);
        return rowmoduleRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::moduleDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::moduleDataTable::Clone() {
        docs::NewDataSet::moduleDataTable^  cln = (cli::safe_cast<docs::NewDataSet::moduleDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::moduleDataTable::CreateInstance() {
        return (gcnew docs::NewDataSet::moduleDataTable());
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::InitVars() {
        this->column_class = __super::Columns[L"class"];
        this->columncontroller_Id = __super::Columns[L"controller_Id"];
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::InitClass() {
        this->column_class = (gcnew ::System::Data::DataColumn(L"class", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_class);
        this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontroller_Id);
        this->column_class->AllowDBNull = false;
        this->column_class->Namespace = L"";
    }
    
    inline docs::NewDataSet::moduleRow^  NewDataSet::moduleDataTable::NewmoduleRow() {
        return (cli::safe_cast<docs::NewDataSet::moduleRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::moduleDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew docs::NewDataSet::moduleRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::moduleDataTable::GetRowType() {
        return docs::NewDataSet::moduleRow::typeid;
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->moduleRowChanged(this, (gcnew docs::NewDataSet::moduleRowChangeEvent((cli::safe_cast<docs::NewDataSet::moduleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->moduleRowChanging(this, (gcnew docs::NewDataSet::moduleRowChangeEvent((cli::safe_cast<docs::NewDataSet::moduleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->moduleRowDeleted(this, (gcnew docs::NewDataSet::moduleRowChangeEvent((cli::safe_cast<docs::NewDataSet::moduleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->moduleRowDeleting(this, (gcnew docs::NewDataSet::moduleRowChangeEvent((cli::safe_cast<docs::NewDataSet::moduleRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::moduleDataTable::RemovemoduleRow(docs::NewDataSet::moduleRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::moduleDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        docs::NewDataSet^  ds = (gcnew docs::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"moduleDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::outputDataTable::outputDataTable() {
        this->TableName = L"output";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::outputDataTable::outputDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::outputDataTable::outputDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::outputDataTable::_classColumn::get() {
        return this->column_class;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::outputDataTable::controller_IdColumn::get() {
        return this->columncontroller_Id;
    }
    
    inline ::System::Int32 NewDataSet::outputDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline docs::NewDataSet::outputRow^  NewDataSet::outputDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<docs::NewDataSet::outputRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::outputDataTable::AddoutputRow(docs::NewDataSet::outputRow^  row) {
        this->Rows->Add(row);
    }
    
    inline docs::NewDataSet::outputRow^  NewDataSet::outputDataTable::AddoutputRow(System::String^  _class, docs::NewDataSet::controllerRow^  parentcontrollerRowBycontroller_output) {
        docs::NewDataSet::outputRow^  rowoutputRow = (cli::safe_cast<docs::NewDataSet::outputRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {_class, nullptr};
        if (parentcontrollerRowBycontroller_output != nullptr) {
            columnValuesArray[1] = parentcontrollerRowBycontroller_output[6];
        }
        rowoutputRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowoutputRow);
        return rowoutputRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::outputDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::outputDataTable::Clone() {
        docs::NewDataSet::outputDataTable^  cln = (cli::safe_cast<docs::NewDataSet::outputDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::outputDataTable::CreateInstance() {
        return (gcnew docs::NewDataSet::outputDataTable());
    }
    
    inline ::System::Void NewDataSet::outputDataTable::InitVars() {
        this->column_class = __super::Columns[L"class"];
        this->columncontroller_Id = __super::Columns[L"controller_Id"];
    }
    
    inline ::System::Void NewDataSet::outputDataTable::InitClass() {
        this->column_class = (gcnew ::System::Data::DataColumn(L"class", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_class);
        this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncontroller_Id);
        this->column_class->AllowDBNull = false;
        this->column_class->Namespace = L"";
    }
    
    inline docs::NewDataSet::outputRow^  NewDataSet::outputDataTable::NewoutputRow() {
        return (cli::safe_cast<docs::NewDataSet::outputRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::outputDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew docs::NewDataSet::outputRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::outputDataTable::GetRowType() {
        return docs::NewDataSet::outputRow::typeid;
    }
    
    inline ::System::Void NewDataSet::outputDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->outputRowChanged(this, (gcnew docs::NewDataSet::outputRowChangeEvent((cli::safe_cast<docs::NewDataSet::outputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::outputDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->outputRowChanging(this, (gcnew docs::NewDataSet::outputRowChangeEvent((cli::safe_cast<docs::NewDataSet::outputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::outputDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->outputRowDeleted(this, (gcnew docs::NewDataSet::outputRowChangeEvent((cli::safe_cast<docs::NewDataSet::outputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::outputDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->outputRowDeleting(this, (gcnew docs::NewDataSet::outputRowChangeEvent((cli::safe_cast<docs::NewDataSet::outputRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::outputDataTable::RemoveoutputRow(docs::NewDataSet::outputRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::outputDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        docs::NewDataSet^  ds = (gcnew docs::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"outputDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::controllerRow::controllerRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecontroller = (cli::safe_cast<docs::NewDataSet::controllerDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::controllerRow::enabled::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->enabledColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'enabled\' in table \'controller\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::controllerRow::enabled::set(System::String^  value) {
        this[this->tablecontroller->enabledColumn] = value;
    }
    
    inline System::String^  NewDataSet::controllerRow::ajax::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->ajaxColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ajax\' in table \'controller\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::controllerRow::ajax::set(System::String^  value) {
        this[this->tablecontroller->ajaxColumn] = value;
    }
    
    inline System::String^  NewDataSet::controllerRow::alias::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->aliasColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'alias\' in table \'controller\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::controllerRow::alias::set(System::String^  value) {
        this[this->tablecontroller->aliasColumn] = value;
    }
    
    inline System::String^  NewDataSet::controllerRow::gzip::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->gzipColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'gzip\' in table \'controller\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::controllerRow::gzip::set(System::String^  value) {
        this[this->tablecontroller->gzipColumn] = value;
    }
    
    inline System::String^  NewDataSet::controllerRow::session::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->sessionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'session\' in table \'controller\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::controllerRow::session::set(System::String^  value) {
        this[this->tablecontroller->sessionColumn] = value;
    }
    
    inline System::String^  NewDataSet::controllerRow::nocache::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->nocacheColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'nocache\' in table \'controller\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::controllerRow::nocache::set(System::String^  value) {
        this[this->tablecontroller->nocacheColumn] = value;
    }
    
    inline System::Int32 NewDataSet::controllerRow::controller_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecontroller->controller_IdColumn]));
    }
    inline System::Void NewDataSet::controllerRow::controller_Id::set(System::Int32 value) {
        this[this->tablecontroller->controller_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::controllerRow::IsenabledNull() {
        return this->IsNull(this->tablecontroller->enabledColumn);
    }
    
    inline ::System::Void NewDataSet::controllerRow::SetenabledNull() {
        this[this->tablecontroller->enabledColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::controllerRow::IsajaxNull() {
        return this->IsNull(this->tablecontroller->ajaxColumn);
    }
    
    inline ::System::Void NewDataSet::controllerRow::SetajaxNull() {
        this[this->tablecontroller->ajaxColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::controllerRow::IsaliasNull() {
        return this->IsNull(this->tablecontroller->aliasColumn);
    }
    
    inline ::System::Void NewDataSet::controllerRow::SetaliasNull() {
        this[this->tablecontroller->aliasColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::controllerRow::IsgzipNull() {
        return this->IsNull(this->tablecontroller->gzipColumn);
    }
    
    inline ::System::Void NewDataSet::controllerRow::SetgzipNull() {
        this[this->tablecontroller->gzipColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::controllerRow::IssessionNull() {
        return this->IsNull(this->tablecontroller->sessionColumn);
    }
    
    inline ::System::Void NewDataSet::controllerRow::SetsessionNull() {
        this[this->tablecontroller->sessionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::controllerRow::IsnocacheNull() {
        return this->IsNull(this->tablecontroller->nocacheColumn);
    }
    
    inline ::System::Void NewDataSet::controllerRow::SetnocacheNull() {
        this[this->tablecontroller->nocacheColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< docs::NewDataSet::inputRow^  >^  NewDataSet::controllerRow::GetinputRows() {
        if (this->Table->ChildRelations[L"controller_input"] == nullptr) {
            return gcnew cli::array< docs::NewDataSet::inputRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< docs::NewDataSet::inputRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_input"])));
        }
    }
    
    inline cli::array< docs::NewDataSet::moduleRow^  >^  NewDataSet::controllerRow::GetmoduleRows() {
        if (this->Table->ChildRelations[L"controller_module"] == nullptr) {
            return gcnew cli::array< docs::NewDataSet::moduleRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< docs::NewDataSet::moduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_module"])));
        }
    }
    
    inline cli::array< docs::NewDataSet::outputRow^  >^  NewDataSet::controllerRow::GetoutputRows() {
        if (this->Table->ChildRelations[L"controller_output"] == nullptr) {
            return gcnew cli::array< docs::NewDataSet::outputRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< docs::NewDataSet::outputRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_output"])));
        }
    }
    
    
    inline NewDataSet::inputRow::inputRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableinput = (cli::safe_cast<docs::NewDataSet::inputDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::inputRow::_class::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableinput->_classColumn]));
    }
    inline System::Void NewDataSet::inputRow::_class::set(System::String^  value) {
        this[this->tableinput->_classColumn] = value;
    }
    
    inline System::Int32 NewDataSet::inputRow::controller_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableinput->controller_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'input\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::inputRow::controller_Id::set(System::Int32 value) {
        this[this->tableinput->controller_IdColumn] = value;
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::inputRow::controllerRow::get() {
        return (cli::safe_cast<docs::NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_input"])));
    }
    inline System::Void NewDataSet::inputRow::controllerRow::set(docs::NewDataSet::controllerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"controller_input"]);
    }
    
    inline ::System::Boolean NewDataSet::inputRow::Iscontroller_IdNull() {
        return this->IsNull(this->tableinput->controller_IdColumn);
    }
    
    inline ::System::Void NewDataSet::inputRow::Setcontroller_IdNull() {
        this[this->tableinput->controller_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::moduleRow::moduleRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablemodule = (cli::safe_cast<docs::NewDataSet::moduleDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::moduleRow::_class::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablemodule->_classColumn]));
    }
    inline System::Void NewDataSet::moduleRow::_class::set(System::String^  value) {
        this[this->tablemodule->_classColumn] = value;
    }
    
    inline System::Int32 NewDataSet::moduleRow::controller_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablemodule->controller_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'module\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::moduleRow::controller_Id::set(System::Int32 value) {
        this[this->tablemodule->controller_IdColumn] = value;
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::moduleRow::controllerRow::get() {
        return (cli::safe_cast<docs::NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_module"])));
    }
    inline System::Void NewDataSet::moduleRow::controllerRow::set(docs::NewDataSet::controllerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"controller_module"]);
    }
    
    inline ::System::Boolean NewDataSet::moduleRow::Iscontroller_IdNull() {
        return this->IsNull(this->tablemodule->controller_IdColumn);
    }
    
    inline ::System::Void NewDataSet::moduleRow::Setcontroller_IdNull() {
        this[this->tablemodule->controller_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::outputRow::outputRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableoutput = (cli::safe_cast<docs::NewDataSet::outputDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::outputRow::_class::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableoutput->_classColumn]));
    }
    inline System::Void NewDataSet::outputRow::_class::set(System::String^  value) {
        this[this->tableoutput->_classColumn] = value;
    }
    
    inline System::Int32 NewDataSet::outputRow::controller_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableoutput->controller_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'output\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::outputRow::controller_Id::set(System::Int32 value) {
        this[this->tableoutput->controller_IdColumn] = value;
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::outputRow::controllerRow::get() {
        return (cli::safe_cast<docs::NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_output"])));
    }
    inline System::Void NewDataSet::outputRow::controllerRow::set(docs::NewDataSet::controllerRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"controller_output"]);
    }
    
    inline ::System::Boolean NewDataSet::outputRow::Iscontroller_IdNull() {
        return this->IsNull(this->tableoutput->controller_IdColumn);
    }
    
    inline ::System::Void NewDataSet::outputRow::Setcontroller_IdNull() {
        this[this->tableoutput->controller_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::controllerRowChangeEvent::controllerRowChangeEvent(docs::NewDataSet::controllerRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline docs::NewDataSet::controllerRow^  NewDataSet::controllerRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::controllerRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::inputRowChangeEvent::inputRowChangeEvent(docs::NewDataSet::inputRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline docs::NewDataSet::inputRow^  NewDataSet::inputRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::inputRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::moduleRowChangeEvent::moduleRowChangeEvent(docs::NewDataSet::moduleRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline docs::NewDataSet::moduleRow^  NewDataSet::moduleRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::moduleRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::outputRowChangeEvent::outputRowChangeEvent(docs::NewDataSet::outputRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline docs::NewDataSet::outputRow^  NewDataSet::outputRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::outputRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
