//
// Base configuration for executing lint
//

// Start with nothing, add what we want
-e*
+e900   
+e2??
+e3??

// Processing Options
-passes(3, -save, -restore -e? -e?? -e1?? -e1??? -e11?? +e429 -vm) // perform n passes supressing some errors on passes n > 1 
+fce			// Continue on fatal error when possible

+linebuf		// handle longer lines x2
+linebuf		// handle longer lines x2
+macros			// handle longer macros x2
+macros	    // handle longer macros x2
+macros     // handle longer macros x2

-incvar()		        // Ignore the include environment variable
-specific_climit(202)   // Limit recursive function calls

-voi        // remove verbose on other and indirect files
+vm			    // list module names so we know what we processed
//+vf         //Enable include file trace

//  Error Supression Options
-w0			// Set warning level 0 to report internal and fatal errors
			// internal	: 200 - 299
			// fatal	: 300 - 399
-e322			// Don't die if we can't find include, but will still be reported as e7

// Turn on syntax messages
+e1 +e2 +e3 +e4 +e5 +e6	+e7 +e8 +e9
+e1? +e2? +e3? +e4? +e5? +e6? +e7? +e8? +e9?

//
// Microsoft
//
co-msc80.lnt
env-vc8.lnt
lib-w32.lnt
lib-nstd.lnt
lib-stl.lnt

// Generates huge amount of crap
-e14
-e18 
-e63
-e64
-e114

// These are syntax errors which I really think we can always ignore and which generate a lot of crap
-e38
-e46


+e1??

//+e40			// Undeclared identifier
//+e42			// Expected a statement
//+e101	 Noisy?		// Expected an identifier in parameter definition
//+e118	 Noisy?		// Too few args for prototype
//+e119	 Noisy?		// Too many args for prototype

+e10??			// Turn on all C++ syntax msgs up to 1099
+e11??			// Turn on all C++ syntax msgs up to 1199
-e1075

// Uninitialized variables
+e530
+e603
+e644
+e645
// +e727	// Removed due to high spurious rate caused by assumed default 0 initialization for globals and static autos
+e728
// +e729	// Removed due to high spurious rate caused by assumed default 0 initialization for globals and static autos
+e738
+e771
+e772
+e1402
+e1403
+e1542
+e1543
+e1743

// Memory leaks
+e423
+e429
+e672
+e809

// Null pointer dereferences
+e413
+e418
+e613
+e668
+e794
+e802

// Out of bounds array accesses & buffer overruns
+e415
+e416
+e419
+e420
+e661
+e662
+e669
+e670
+e797
+e803
+e804

// Bad deallocation
+e424
+e673
+e811
+e1404
+e1507
+e1512
+e1524
+e1540

// Test Classes
+e414			// Possible division by 0
+e604			// Returning Address of auto variable resulting in an invalid ptr.	
+e733			// Assigning the address of an auto variable to outer scope symbol
+e789			// Assigning address of auto to static
+e809			// Possible return of address of atuo through variable
+e1538			// Base class absent from initializer list for copy constructor
+e1733			// New in constructor for class which has no copy constructor

//I'm not sure that these are being used for anything, and they sometimes generate a lot of stuff.  
//XXX In future we should test if these are used for anything..
//+e830			// Turn on Location cited in prior message
//+e831			// Turn on Reference cited in prior message
//+e526			// Notify us of undefined functions
//+e1734		// Had difficulty compiling template function
//-e915         // Generates lots of crap

//
//ALibrary/etc
//
-DWIN32
-D_DEBUG
-D_WINDOWS
-D_USRDLL

//  Formatting Options
-haFr1
-width(10240,0)
-format=!!!%t[%n],%f,%l,%c,%i,%m
-format_specific=!!!%t[%n],%f,%l,%c,%i,%m

+ffn              // Use full filenames
